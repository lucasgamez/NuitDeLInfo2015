// Addition

rules
  add1: 0 X -> X;
  add2: succ(X) Y -> succ (add X Y);

trace *;

simp [left_outer]   add 2 5;

//  Soustraction

rules
  moins1: X 0 -> X;
  moins1: 0 X -> X;
  moins2: succ(X) succ(Y) -> moins X Y;

trace *;

simp [left_outer]   moins 2 5;
simp [left_outer]   moins 5 2;

//  Multiplication

rules
  fois1: X 0 -> X;
  fois1: 0 X-> X;
  fois2: succ(X) succ(Y) -> fois X Y;

trace *;

simp [left_outer]   fois 2 5;

// InfÃ©rieur

rules
  inf0: inf X 0 -> 1;
  inf1: inf 0 X -> 0;
  inf2: inf 0 0 -> 0;
  infs: inf (succ X) (succ Y) -> inf X Y;
  
rules
  sup0: sup X 0 -> 0;
  sup1: sup 0 X -> 1;
  sup2: sup 0 0 -> 0;
  sups: sup (succ X) (succ Y) -> sup X Y;
  
trace *;

simp [left_outer] inf 3 4

// Egal
rules
  eg0: eg 0 0 -> 1;
  eg1: eg Y 0 -> 0;
  eg2: eg 0 Y -> 0;
  egs: eg (succ X) (succ Y) -> eg X Y;
  
trace *;

simp [left_outer] eg 4 4
  
// 